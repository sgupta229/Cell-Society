package model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import model.ConfigReader;


class ConfigReaderTest {

    @Test ()
    public void testReadFail(){
        assertThrows(IllegalArgumentException.class, () -> {
            new ConfigReader("someRandomNonexistentFile");
        });
    }

    @Test
    public void testReadPercolation(){
        var c = new ConfigReader("percolationRandom");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
                "mySimType='PERCOLATION'\n" +
                "myCellShape='SQUARE'\n" +
                "neighborPolicy=COMPLETE\n" +
                "edgePolicy=TOROIDAL\n" +
                "isOutlined=true\n" +
                "initialConfig=DETERMINISTIC\n" +
                "myNumStates=3\n" +
                "numCols=14\n" +
                "numRows=10\n" +
                "gridData=[0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]}";
        assertEquals(expected, actual);
    }

    @Test
    public void testReadGOL(){
        var c = new ConfigReader("gameOfLifeGlider");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
            "mySimType='GAMEOFLIFE'\n" +
            "myCellShape='SQUARE'\n" +
            "neighborPolicy=COMPLETE\n" +
            "edgePolicy=TOROIDAL\n" +
            "isOutlined=true\n" +
            "initialConfig=DETERMINISTIC\n" +
            "myNumStates=2\n" +
            "numCols=10\n" +
            "numRows=10\n" +
            "gridData=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}";
        assertEquals(expected, actual);
    }


    @Test
    public void testReadRPS(){
        var c = new ConfigReader("rockPaperScissors");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
            "mySimType='ROCKPAPERSCISSORS'\n" +
            "myCellShape='SQUARE'\n" +
            "neighborPolicy=COMPLETE\n" +
            "edgePolicy=KLEINBOTTLE\n" +
            "isOutlined=false\n" +
            "initialConfig=DETERMINISTIC\n" +
            "myNumStates=3\n" +
            "numCols=30\n" +
            "numRows=30\n" +
            "gridData=[2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 2, 1, 0, 2, 0, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 0, 1, 0, 1, 0, 2, 0, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 2, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 0, 2, 1, 0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 1, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 2, 1, 1, 2, 1, 0, 0, 2, 0, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2]}";
        assertEquals(expected, actual);
    }


    @Test
    public void testReadSegregation(){
        var c = new ConfigReader("segregationMedium");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
            "mySimType='SEGREGATION'\n" +
            "myCellShape='TRIANGLE'\n" +
            "neighborPolicy=COMPLETE\n" +
            "edgePolicy=BOUNDED\n" +
            "isOutlined=false\n" +
            "initialConfig=DETERMINISTIC\n" +
            "myNumStates=3\n" +
            "numCols=10\n" +
            "numRows=10\n" +
            "gridData=[2, 1, 2, 0, 1, 2, 0, 2, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 1, 0, 1, 1, 0, 2, 0, 1, 2, 1, 0, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 0, 1, 0, 1, 2, 2, 1, 2, 1, 0, 0, 1, 0, 0, 2, 2, 1, 2, 0, 2, 2, 2, 2, 1, 1, 0, 1, 0, 0, 1, 0, 0, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 0, 2, 2, 2, 1, 1, 2, 0, 1, 0, 2, 1, 0, 0, 1]}";
        assertEquals(expected, actual);
    }


    @Test
    public void testReadPredatorPrey(){
        var c = new ConfigReader("predatorPreyMedium");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
            "mySimType='PREDATORPREY'\n" +
            "myCellShape='SQUARE'\n" +
            "neighborPolicy=COMPLETE\n" +
            "edgePolicy=TOROIDAL\n" +
            "isOutlined=false\n" +
            "initialConfig=DETERMINISTIC\n" +
            "myNumStates=3\n" +
            "numCols=14\n" +
            "numRows=10\n" +
            "gridData=[0, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 2, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 0, 2, 1, 1, 0, 1, 2, 2, 0, 1, 1, 1, 1, 0, 1, 1, 2, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0]}";
        assertEquals(expected, actual);
    }


    @Test
    public void testReadFire(){
        var c = new ConfigReader("fireLarge");
        var actual = c.toString();
        var expected = "ConfigReader{\n" +
            "mySimType='FIRE'\n" +
            "myCellShape='TRIANGLE'\n" +
            "neighborPolicy=CARDINAL\n" +
            "edgePolicy=BOUNDED\n" +
            "isOutlined=false\n" +
            "initialConfig=DETERMINISTIC\n" +
            "myNumStates=3\n" +
            "numCols=30\n" +
            "numRows=30\n" +
            "gridData=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]}";
        assertEquals(expected, actual);
    }


}